#ifndef _SYSTEM_INIT_H_
#define _SYSTEM_INIT_H_

#ifdef __cplusplus		   		//定义对CPP进行C处理 //开始部分
extern "C" {
#endif

#include "includes.h"						//SysInit

//数据来源标志
#define PCBOOT 								0x2012				//PC发固件升级标志
#define NETBOOT 							0x2013				//ZX发固件升级标志

/****************************************************************************
* 名	称：u8 Get_EMOS_Versions(u8* Versions)
* 功	能：获取平台版本号
* 入口参数：Versions		版本号地址
* 出口参数：u8					版本号字符长度
* 说	明：版本号21个字符
****************************************************************************/
u8 Get_EMOS_Versions(u8* Versions);
	
/****************************************************************************
* 名	称：uint32_t Get_CPUSysTime(void)
* 功	能：获取系统各时钟频率
* 入口参数：无
* 出口参数：uint32_t	各时钟频率
* 说	明：
0 = SYSCLK clock frequency expressed in Hz
1 = HCLK clock frequency expressed in Hz
2 = PCLK1 clock frequency expressed in Hz
3 = PCLK2 clock frequency expressed in Hz
其它返回0
****************************************************************************/
uint32_t Get_CPUSysTime(u8 Flag);
	
/****************************************************************************
* 名	称：void System_Init(void)
* 功	能：系统初始化
* 入口参数：无
* 出口参数：无
* 说	明：
中断管理初始化
初始化系统滴答时间	(10毫秒级)
系统初始化
设备管理单元初始化
****************************************************************************/	
void System_Init(void);					//板级初始化
	
/****************************************************************************
* 名	称：u32 LookAppRunAddr(void)
* 功	能：获取跳转地址
* 入口参数：无
* 出口参数：u32 						跳转地址
* 说	明：无
****************************************************************************/
u32 LookAppRunAddr(void);				//查看跳转地址
	
/****************************************************************************
* 名	称：void SetAppRunAddr(u32 addr)
* 功	能：设置跳转地址
* 入口参数：u32 addr				跳转地址
* 出口参数：无
* 说	明：无
****************************************************************************/
void SetAppRunAddr(u32 addr);

/****************************************************************************
* 名	称：void GetCpuIdHex(void)
* 功	能：获取CPU芯片ID值16进制   
* 入口参数：无
* 出口参数：无
* 说	明：6个u16的值存放CPUID
			u16 x[6] = {0};
			u8 x[12] = {0};
****************************************************************************/
void GetCpuIdHex(u8* HCpuId);

/****************************************************************************
* 名	称：u32 ASCIItoNumber(u8* data_temp,u8 len_temp)
* 功	能：将ASCII码数字转换成为u32型数字
* 入口参数：u8* data_temp	ASCII码数字
						u8 len_temp		ASCII码数字个数
* 出口参数：u32 unsigned 	int型数字
* 测试代码：
u32 num = 0;
num = ASCIItoNumber("1234",4);
//num = 1234;
****************************************************************************/
u32 ASCIItoNumber(u8* data_temp,u8 len_temp);

/****************************************************************************
* 名	称：u32 BCDToBIN(u32 BCD)
* 功	能：将十进制数据转二进制码10进制数
* 入口参数：u32 十进制数据
* 出口参数：u32 二进制数据
* 测试代码：
u32 BcdVal = 101;
u32 BinVal = 0;
BinVal = BCDToBIN(BcdVal);
//BinVal = 65;
****************************************************************************/
u32 BCDToBIN(u32 BCD);

/****************************************************************************
* 名	称：u32 BINToBCD(u32 BIN)
* 功	能：将二进制码10进制数转十进制数据
* 入口参数：u32 二进制数据
* 出口参数：u32 十进制数据
* 测试代码：
u32 BinVal = 65;
u32 BcdVal = 0;
BcdVal = BINToBCD(BinVal);
//BcdVal = 101;
****************************************************************************/
u32 BINToBCD(u32 BIN);

/****************************************************************************
* 名	称：u8 FLASH_APPBak_Erase(void)
* 功	能：擦除应用数据空间12
* 入口参数：无
* 出口参数：u8		擦除是否成功 1成功 0失败
* 说	明：一定要检查是否擦除成功，不成功则再来一次。
****************************************************************************/
u8 FLASH_APPBakOne_Erase(void);
u8 FLASH_APPBakTwo_Erase(void);

/****************************************************************************
* 名	称：u8 Flash_APPBak_Store(u32 Addri,u8* Data,u32 DataSize)
* 功	能：将数据写到指定的FLASH空间
* 入口参数：u32 Addri			偏移地址	4的倍数(Flash4字节操作)
						u8* Data数据
						u32 DataSize	数据大小
* 出口参数：u8	0存储失败
				1存储成功
* 说	明：按32位数据长度进行存储	 必须要先擦除才能改写
****************************************************************************/
u8 Flash_APPBak_Store(u32 Addri,u8* Data,u32 DataSize);

/****************************************************************************
* 名	称：u8 Flash_APPInfo_Store(u32 FILECRC,u32 FILESize, u32 flag)
* 功	能：将数据写到指定的FLASH空间
* 入口参数：u8* Data数据
						u32 DataSize	数据大小
* 出口参数：u8	0存储失败
				1存储成功
* 说	明：按32位数据长度进行存储	 必须要先擦除才能改写
****************************************************************************/
u8 Flash_APPInfo_Store(u32 FILECRC,u32 FILESize, u32 flag);

/****************************************************************************
* 名	称：u8 Flash_UPFlag(void)
* 功	能：修改更新标志
* 入口参数：无
* 出口参数：u8	0存储失败
								1存储成功
* 说	明：无
****************************************************************************/
u8 Flash_UPFlag(void);

/****************************************************************************
* 名	称：u8 Get_EMOS_Versions(u8* Versions)
* 功	能：获取平台版本号
* 入口参数：Versions		版本号地址
* 出口参数：u8					版本号字符长度
* 说	明：版本号21个字符，接收空间不小于21个字节
****************************************************************************/
u8 Get_EMOS_Versions(u8* Versions);

#ifdef __cplusplus		   		//定义对CPP进行C处理 //结束部分
}
#endif

#endif

/*
//注意：
1：Flash_APPBak_Store(12,w,201)	第一个参数必须是4的倍数
2：如果存储201个数据，实际会存储204个数据，FLASH操作为4字节操作(即32位)，不足的3位会在存储时自动补0,即[202] = 0,[203] = 0,[204] = 0

	u8 w[250] = {0};		//写入的数据
	u8 flag = 1;				//防止开机写入标志

	u8 i = 0;

	for(i = 1;i < 202;i++)				//写入数据准备
		w[i] = i;
	
	while(flag)										//防止开机写入
		flag = flag;
	
	if(FLASH_APPBak_Erase() == 0)				//擦除应用程序备份区		一次擦除即可
		while(1);
	if(Flash_APPBak_Store(12,w,201) == 0)	//写入数据到应用程序备份区		12必须是4的倍数
		while(1);
	if(Flash_APPInfo_Store(0x98765432,0x5AA5) == 0)
		while(1);	
 	if(FLASH_APPBak_Erase() == 0)				//擦除应用程序备份区
 		while(1);
	
	Flash_UPFlag();											//更新更新标志
	
	while(1);
*/
