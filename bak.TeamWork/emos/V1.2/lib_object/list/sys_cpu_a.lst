


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/Sys-I
                       I
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           Generic ARM 
                       Port
    9 00000000         ;
   10 00000000         ; File      : SYS_CPU_A.ASM
   11 00000000         ; Version   : V2.86
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;
   14 00000000         ; For       : ARMv7M Cortex-M3
   15 00000000         ; Mode      : Thumb2
   16 00000000         ; Toolchain : RealView Development Suite
   17 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   18 00000000         ;             ARM Developer Suite (ADS)
   19 00000000         ;             Keil uVision
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         ;                                           PUBLIC FUNCT
                       IONS
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         
   26 00000000                 EXTERN           SysRunning  ; External referenc
                                                            es
   27 00000000                 EXTERN           SysPrioCur
   28 00000000                 EXTERN           SysPrioHighRdy
   29 00000000                 EXTERN           SysTCBCur
   30 00000000                 EXTERN           SysTCBHighRdy
   31 00000000                 EXTERN           SysIntNesting
   32 00000000                 EXTERN           SysIntExit
   33 00000000                 EXTERN           SysTaskSwHook
   34 00000000         
   35 00000000         
   36 00000000                 EXPORT           SYS_CPU_SR_Save ; Functions dec
                                                            lared in this file
   37 00000000                 EXPORT           SYS_CPU_SR_Restore
   38 00000000                 EXPORT           SysStartHighRdy
   39 00000000                 EXPORT           SysCtxSw
   40 00000000                 EXPORT           SysIntCtxSw
   41 00000000                 EXPORT           SYS_CPU_PendSVHandler
   42 00000000         
   43 00000000         ;*******************************************************
                       *************************************************
   44 00000000         ;                                                EQUATES
                       



ARM Macro Assembler    Page 2 


   45 00000000         ;*******************************************************
                       *************************************************
   46 00000000         
   47 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   48 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   49 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   50 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   51 00000000         
   52 00000000         ;*******************************************************
                       *************************************************
   53 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         
   56 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   57 00000000                 THUMB
   58 00000000                 REQUIRE8
   59 00000000                 PRESERVE8
   60 00000000         
   61 00000000         ;*******************************************************
                       *************************************************
   62 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   63 00000000         ;
   64 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   65 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   66 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/Sys-II's functions that need to
   67 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   68 00000000         ;              into the CPU's status register.
   69 00000000         ;
   70 00000000         ; Prototypes :     SYS_CPU_SR  SYS_CPU_SR_Save(void);
   71 00000000         ;                  void       SYS_CPU_SR_Restore(SYS_CPU
                       _SR cpu_sr);
   72 00000000         ;
   73 00000000         ;
   74 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   75 00000000         ;
   76 00000000         ;                 void Task (void *p_arg)
   77 00000000         ;                 {



ARM Macro Assembler    Page 3 


   78 00000000         ;                 #if SYS_CRITICAL_METHOD == 3          
                       /* Allocate storage for CPU status register */
   79 00000000         ;                     SYS_CPU_SR  cpu_sr;
   80 00000000         ;                 #endif
   81 00000000         ;
   82 00000000         ;                          :
   83 00000000         ;                          :
   84 00000000         ;                     SYS_ENTER_CRITICAL();             
                       /* cpu_sr = SYS_CPU_SaveSR();                */
   85 00000000         ;                          :
   86 00000000         ;                          :
   87 00000000         ;                     SYS_EXIT_CRITICAL();              
                       /* SYS_CPU_RestoreSR(cpu_sr);                */
   88 00000000         ;                          :
   89 00000000         ;                          :
   90 00000000         ;                 }
   91 00000000         ;*******************************************************
                       *************************************************
   92 00000000         
   93 00000000         SYS_CPU_SR_Save
   94 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   95 00000004 B672            CPSID            I
   96 00000006 4770            BX               LR
   97 00000008         
   98 00000008         SYS_CPU_SR_Restore
   99 00000008 F380 8810       MSR              PRIMASK, R0
  100 0000000C 4770            BX               LR
  101 0000000E         
  102 0000000E         ;*******************************************************
                       *************************************************
  103 0000000E         ;                                          START MULTITA
                       SKING
  104 0000000E         ;                                       void SysStartHig
                       hRdy(void)
  105 0000000E         ;
  106 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  107 0000000E         ;              the first task to start.
  108 0000000E         ;
  109 0000000E         ;           2) SysStartHighRdy() MUST:
  110 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  111 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  112 0000000E         ;              c) Set SysRunning to TRUE;
  113 0000000E         ;              d) Trigger PendSV exception;
  114 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  115 0000000E         ;*******************************************************
                       *************************************************
  116 0000000E         
  117 0000000E         SysStartHighRdy
  118 0000000E 4820            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  119 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  120 00000014 7001            STRB             R1, [R0]



ARM Macro Assembler    Page 4 


  121 00000016         
  122 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  123 00000018 F380 8809       MSR              PSP, R0
  124 0000001C         
  125 0000001C 481D            LDR              R0, =SysRunning 
                                                            ; SysRunning = TRUE
                                                            
  126 0000001E 2101            MOVS             R1, #1
  127 00000020 7001            STRB             R1, [R0]
  128 00000022         
  129 00000022 481D            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  130 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  131 00000028 6001            STR              R1, [R0]
  132 0000002A         
  133 0000002A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  134 0000002C         
  135 0000002C         SysStartHang
  136 0000002C E7FE            B                SysStartHang ; Should never get
                                                             here
  137 0000002E         
  138 0000002E         
  139 0000002E         ;*******************************************************
                       *************************************************
  140 0000002E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  141 0000002E         ;                                           void SysCtxS
                       w(void)
  142 0000002E         ;
  143 0000002E         ; Note(s) : 1) SysCtxSw() is called when Sys wants to pe
                       rform a task context switch.  This function
  144 0000002E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  145 0000002E         ;*******************************************************
                       *************************************************
  146 0000002E         
  147 0000002E         SysCtxSw
  148 0000002E 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  149 00000030 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  150 00000034 6001            STR              R1, [R0]
  151 00000036 4770            BX               LR
  152 00000038         
  153 00000038         ;*******************************************************
                       *************************************************
  154 00000038         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  155 00000038         ;                                         void SysIntCtx
                       Sw(void)
  156 00000038         ;
  157 00000038         ; Notes:    1) SysIntCtxSw() is called by SysIntExit() w



ARM Macro Assembler    Page 5 


                       hen it determines a context switch is needed as
  158 00000038         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  159 00000038         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  160 00000038         ;*******************************************************
                       *************************************************
  161 00000038         
  162 00000038         SysIntCtxSw
  163 00000038 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  164 0000003A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  165 0000003E 6001            STR              R1, [R0]
  166 00000040 4770            BX               LR
  167 00000042         
  168 00000042         ;*******************************************************
                       *************************************************
  169 00000042         ;                                         HANDLE PendSV 
                       EXCEPTION
  170 00000042         ;                                     void SYS_CPU_PendS
                       VHandler(void)
  171 00000042         ;
  172 00000042         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  173 00000042         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  174 00000042         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  175 00000042         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  176 00000042         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  177 00000042         ;              a thread or occurs due to an interrupt or
                        exception.
  178 00000042         ;
  179 00000042         ;           2) Pseudo-code is:
  180 00000042         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  181 00000042         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  182 00000042         ;              c) Save the process SP in its TCB, SysTCB
                       Cur->SysTCBStkPtr = SP;
  183 00000042         ;              d) Call SysTaskSwHook();
  184 00000042         ;              e) Get current high priority, SysPrioCur 
                       = SysPrioHighRdy;
  185 00000042         ;              f) Get current ready thread TCB, SysTCBCu
                       r = SysTCBHighRdy;
  186 00000042         ;              g) Get new process SP from TCB, SP = SysT
                       CBHighRdy->SysTCBStkPtr;
  187 00000042         ;              h) Restore R4-R11 from new process stack;
                       
  188 00000042         ;              i) Perform exception return which will re
                       store remaining context.
  189 00000042         ;
  190 00000042         ;           3) On entry into PendSV handler:
  191 00000042         ;              a) The following have been saved on the p
                       rocess stack (by processor):



ARM Macro Assembler    Page 6 


  192 00000042         ;                 xPSR, PC, LR, R12, R0-R3
  193 00000042         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  194 00000042         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  195 00000042         ;              d) SysTCBCur      points to the SYS_TCB o
                       f the task to suspend
  196 00000042         ;                 SysTCBHighRdy  points to the SYS_TCB o
                       f the task to resume
  197 00000042         ;
  198 00000042         ;           4) Since PendSV is set to lowest priority in
                        the system (by SysStartHighRdy() above), we
  199 00000042         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  200 00000042         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  201 00000042         ;*******************************************************
                       *************************************************
  202 00000042         
  203 00000042         SYS_CPU_PendSVHandler
  204 00000042 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  205 00000044 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  206 00000048 B140            CBZ              R0, SYS_CPU_PendSVHandler_nosav
e 
                                                            ; Skip register sav
                                                            e the first time
  207 0000004A         
  208 0000004A 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  209 0000004C E880 0FF0       STM              R0, {R4-R11}
  210 00000050         
  211 00000050         ;add by kady
  212 00000050 3840            SUBS             R0, R0, #0x40 ; Save remaining 
                                                            regs s16-s31 on pro
                                                            cess stack
  213 00000052 EC80 8A10       VSTM             R0, {S16-S31}
  214 00000056         ;add by kady end
  215 00000056         
  216 00000056         
  217 00000056 4911            LDR              R1, =SysTCBCur ; SysTCBCur->Sys
                                                            TCBStkPtr = SP;
  218 00000058 6809            LDR              R1, [R1]
  219 0000005A 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  220 0000005C         
  221 0000005C         ; At this point, entire context of process has been save
                       d
  222 0000005C         SYS_CPU_PendSVHandler_nosave
  223 0000005C B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  224 0000005E 4810            LDR              R0, =SysTaskSwHook 
                                                            ; SysTaskSwHook();
  225 00000060 4780            BLX              R0
  226 00000062 F85D EB04       POP              {R14}



ARM Macro Assembler    Page 7 


  227 00000066         
  228 00000066 480F            LDR              R0, =SysPrioCur ; SysPrioCur = 
                                                            SysPrioHighRdy;
  229 00000068 490F            LDR              R1, =SysPrioHighRdy
  230 0000006A 780A            LDRB             R2, [R1]
  231 0000006C 7002            STRB             R2, [R0]
  232 0000006E         
  233 0000006E 480B            LDR              R0, =SysTCBCur ; SysTCBCur  = S
                                                            ysTCBHighRdy;
  234 00000070 490E            LDR              R1, =SysTCBHighRdy
  235 00000072 680A            LDR              R2, [R1]
  236 00000074 6002            STR              R2, [R0]
  237 00000076         
  238 00000076 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = SysTCBHig
                                                            hRdy->SysTCBStkPtr;
                                                            
  239 00000078         
  240 00000078         ;add by kady
  241 00000078 EC90 8A10       VLDM             R0, {S16-S31}
  242 0000007C 3040            ADDS             R0, R0, #0x40 ; Restore s16-s31
                                                             from new process s
                                                            tack
  243 0000007E         ;add by kady end
  244 0000007E         
  245 0000007E         
  246 0000007E E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  247 00000082 3020            ADDS             R0, R0, #0x20
  248 00000084 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  249 00000088 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  250 0000008C B662            CPSIE            I
  251 0000008E 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  252 00000090         
  253 00000090                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\out
\sys_cpu_a.d -o.\out\sys_cpu_a.o -Id:\Keil\ARM\RV31\Inc -Id:\Keil\ARM\CMSIS\Inc
lude -Id:\Keil\ARM\Inc\ST\STM32F4xx --list=.\list\sys_cpu_a.lst ..\os\V1.2.2\uC
OS-II\Ports\sys_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 56 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      None
Comment: .text unused
SYS_CPU_PendSVHandler 00000042

Symbol: SYS_CPU_PendSVHandler
   Definitions
      At line 203 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 41 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SYS_CPU_PendSVHandler used once
SYS_CPU_PendSVHandler_nosave 0000005C

Symbol: SYS_CPU_PendSVHandler_nosave
   Definitions
      At line 222 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 206 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SYS_CPU_PendSVHandler_nosave used once
SYS_CPU_SR_Restore 00000008

Symbol: SYS_CPU_SR_Restore
   Definitions
      At line 98 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 37 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SYS_CPU_SR_Restore used once
SYS_CPU_SR_Save 00000000

Symbol: SYS_CPU_SR_Save
   Definitions
      At line 93 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 36 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SYS_CPU_SR_Save used once
SysCtxSw 0000002E

Symbol: SysCtxSw
   Definitions
      At line 147 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 39 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SysCtxSw used once
SysIntCtxSw 00000038

Symbol: SysIntCtxSw
   Definitions
      At line 162 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 40 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SysIntCtxSw used once
SysStartHang 0000002C

Symbol: SysStartHang



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 135 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 136 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SysStartHang used once
SysStartHighRdy 0000000E

Symbol: SysStartHighRdy
   Definitions
      At line 117 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 38 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SysStartHighRdy used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 47 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 129 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
      At line 148 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
      At line 163 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 50 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 130 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
      At line 149 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
      At line 164 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 49 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 119 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 48 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 118 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysIntExit 00000000

Symbol: SysIntExit
   Definitions
      At line 32 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      None
Comment: SysIntExit unused
SysIntNesting 00000000

Symbol: SysIntNesting
   Definitions
      At line 31 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      None
Comment: SysIntNesting unused
SysPrioCur 00000000

Symbol: SysPrioCur
   Definitions
      At line 27 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 228 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SysPrioCur used once
SysPrioHighRdy 00000000

Symbol: SysPrioHighRdy
   Definitions
      At line 28 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 229 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SysPrioHighRdy used once
SysRunning 00000000

Symbol: SysRunning
   Definitions
      At line 26 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 125 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SysRunning used once
SysTCBCur 00000000

Symbol: SysTCBCur
   Definitions
      At line 29 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 217 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
      At line 233 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm

SysTCBHighRdy 00000000

Symbol: SysTCBHighRdy
   Definitions
      At line 30 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 234 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SysTCBHighRdy used once
SysTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: SysTaskSwHook
   Definitions
      At line 33 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
   Uses
      At line 224 in file ..\os\V1.2.2\uCOS-II\Ports\sys_cpu_a.asm
Comment: SysTaskSwHook used once
8 symbols
354 symbols in table
