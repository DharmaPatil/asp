#ifndef _STM32_CRC_INIT_H_	
#define _STM32_CRC_INIT_H_

#ifdef __cplusplus		   //定义对CPP进行C处理 //开始部分
extern "C" {
#endif

#include "stm32f4xx.h"

//硬件CRC32
/****************************************************************************
* 名	称：void CRC32_init(void)
* 功	能：初始化硬件CRC32   
* 入口参数：无
* 出口参数：无
* 说	明：无
****************************************************************************/
void CRC32_init(void);
	
/****************************************************************************
* 名	称：u32 CRC32H_Chack8(u8 flagC,u8 *pBuf, u32 nSize)		  //取CRC32效验值
* 功	能：硬件CRC32效验	   
* 入口参数：u8 flagC	是否清空CRC		0不复位	1复位
			u8 *pBuf 	进入8位数据
			u32 nSize	数据个数
* 出口参数：32位的	CRC32效验码
* 说	明：进入的数据会累计计算CRC32效验码，CRC_ResetDR()为清空上次的效验码
****************************************************************************/
u32 CRC32H_Chack8(u8 flagC,u8 *pBuf, u32 nSize);

/****************************************************************************
* 名	称：u32 CRC32H_Chack32(u8 flagC,u32* pBuf, u32 nSize)		  //取CRC32效验值
* 功	能：硬件CRC32效验	   
* 入口参数：u8 flagC	是否清空CRC		0不复位	1复位
			u32* pBuf 	进入32位的数据
			u32 nSize	数据个数
* 出口参数：32位的	CRC32效验码
* 说	明：进入的数据会累计计算CRC32效验码，CRC_ResetDR()为清空上次的效验码
****************************************************************************/
u32 CRC32H_Chack32(u8 flagC,u32* pBuf, u32 nSize);


/*
	//CRC32效验
	u8 x[3] = {23,55,23};
	u8 x1[3] = {23,55,99};
	u8 x2[3] = {23,55,23};
	u32 yh[3] = {0};		//8位数据硬件校验值

	u32 xx[3] = {123456,456789,123456};
	u32 xx1[3] = {123456,456789,123451};
	u32 xx2[3] = {123456,456789,123456};
	u32 yyh[3] = {0};		//32位数据硬件校验值

	u32 ys[3] = {0};		//软件校验值
	
	//CRC16效验
	u8 X[3] = {12,45,78};
	u16 Y = 0;
	u16 Y1 = 0;
	
	//8位数据硬件CRC32效验码单个生成
	yh[0] = CRC32H_Chack8(1,&x[0],1);
	yh[1] = CRC32H_Chack8(1,&x[1],1);
	yh[2] = CRC32H_Chack8(1,&x[2],1);	//yh[2] = yh[0]

	memset(yh,0,sizeof(yh));

	//8位数据硬件CRC32效验码多个生成
	yh[0] = CRC32H_Chack8(1,x,3);
	yh[1] = CRC32H_Chack8(1,x1,3);
	yh[2] = CRC32H_Chack8(1,x2,3);		//yh[2] = yh[0]

	//32位数据硬件CRC32效验码单个生成
	yyh[0] = CRC32H_Chack32(1,&xx[0],1);
	yyh[1] = CRC32H_Chack32(1,&xx[1],1);
	yyh[2] = CRC32H_Chack32(1,&xx[2],1);	//yyh[2] = yyh[0]

	memset(yyh,0,sizeof(yyh));

	//32位数据硬件CRC32效验码多个生成
	yyh[0] = CRC32H_Chack32(1,xx,3);
	yyh[1] = CRC32H_Chack32(1,xx1,3);
	yyh[2] = CRC32H_Chack32(1,xx2,3);		//yyh[2] = yyh[0]

*/

#ifdef __cplusplus		   //定义对CPP进行C处理 //结束部分
}
#endif

#endif
